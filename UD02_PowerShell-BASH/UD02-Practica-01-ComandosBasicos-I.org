#+Title: Unidad 02 - Comandos Básicos I
#+Author: Angel Berlanas Vicente

#+LATEX_HEADER: \hypersetup{colorlinks=true,urlcolor=blue}

#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \fancyhead{} % clear all header fields
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhead[R]{1-SMX:SOM - Practica}
#+LATEX_HEADER: \fancyhead[L]{Unidad 02: Practica]}

#+LATEX_HEADER:\usepackage{wallpaper}
#+LATEX_HEADER: \ULCornerWallPaper{0.9}{../rsrc/logos/header_europa.png}
#+LATEX_HEADER: \CenterWallPaper{0.7}{../rsrc/logos/watermark_1.png}

* Practica : Comandos Básicos

  En esta práctica vamos a realizar una serie de ejercicios para ir comprobando
  cómo funciona las líneas de comandos. En un primer momento comenzaremos con la
  línea de comandos de GNU/LinuX y luego veremos la de Windows (PowerShell).

* Shell en GNU/LinuX

  Cuando abrimos una terminal en el modo gráfico o iniciamos sesión en una
  de las ttys (tal y como hemos visto anteriormente), lo que se muestra al
  usuario es un intérprete de órdenes, o también llamado /shell/. La shell
  que tiene predeterminado un usuario lo tenemos en el fichero
  =/etc/passwd=.

  La shell nos muestra siempre cierto /Prompt/, que son los carácteres que
  se muestran en una línea de comandos para indicar que está a la espera
  de órdenes. Éste puede variar dependiendo del intérprete de comandos y
  suele ser configurable.

  Cuando iniciamos sesión con el usuario /violin/ en una terminal, lo que
  se nos muestra es algo parecido a esto:
  
  =smx@xubuntu:~$=

  ¿Que información nos ofrece?
  
  - El usuario es /smx/
  - Se encuentra en una máquina cuyo nombre es /xubuntu/
  - Su directorio actual es : /~/
  - Se trata de un usuario distinto de *root*

  En el caso de que nos hubieramos logado con el usuario *root*, el prompt
  habría cambiado y tendría este aspecto:

  =root@xubuntu:~#=

  ¿Qué información nos ofrece?

  - El usuario es *root* (id=0)
  - Se encuentra en una máquina cuyo nombre es /xubuntu/
  - Su directorio actual es : /~/
  - Se trata del usuario *root*, ya que tiene un "#" justo antes de la
    entrada de órdenes.

  Este entorno de texto donde nos encontramos y que nos permite introducir
  comandos es conocido comúnmente como Shell (caparazón).
  
  Este Shell es capaz de interpretar una gran gama de comandos y
  sentencias. Constituye a su vez un poderoso lenguaje de programación
  mediante scripts.
  
  GNU-Linux tiene la filosofía de no obligar al usuario a utilizar un
  programa determinado para cada acción, sino que siempre da la libertad
  de elegir el programa que queremos utilizar. Lo mismo ocurre con el
  Shell que vayamos a utilizar para acceder al sistema. El Shell que más
  se usa es conocido como bash, aunque existen una gran variedad de ellos,
  como por ejemplo csh, ksh, etc.

*** Características de BASH

Algunas características que merece la pena conocer de bash son:

- *Auto completar* durante la escritura. Al teclear uno o varios
  caracteres se puede pulsar /TAB/ con el objetivo de que en caso de que
  pueda completarse de forma unívoca un comando, nombre de fichero o una
  variable (según el contexto), complete de forma automática (se escriba
  el resto de la palabra). Si existieran varias posibilidades para
  completar la palabra, se oirá un sonido y volviendo a pulsar TAB se
  mostrarán en pantalla todas las posibilidades existentes. En caso de
  existir muchas posibilidades (por defecto más de 100) se pregunta si
  se desea mostrarlas todas o no. PowerShell también incluye un
  comportamiento similar pero no funciona de la misma manera.
- *Historial de comandos*. Esta es una característica de muchos otros
  shells que permite el movimiento a través de los últimos comandos
  ejecutados, sea en la sesión actual o en las anteriores. Por defecto
  se acceden a los últimos 1000 comandos, pero puede modificarse. Para
  moverse arriba y abajo se suelen utilizar los cursores.
- *Poderosas estructuras de control para realizar scripts*. (Procesos
  por lotes/Guiones). Se pueden utilizar instrucciones if, for, while,
  select, case, etc.
- *Definición de funciones y alias para comandos.* Las funciones
  permiten definir subrutinas programadas usando el lenguaje de bash.
  Los alias permiten asociar nombres llamadas a comandos con ciertas
  opciones y argumentos de forma más nemotécnica o abreviada.


** Moviéndonos por el Sistema de Archivos

   Vamos a comenzar nuestra andadura por el uso de la Terminal con los comandos que 
   nos permiten desplazarnos por las carpetas del sistema (de ahora en adelante también 
   conocidas como /Sistema de Ficheros/). Y ejecutar las operaciones básicas sobre los 
   ficheros.

   Recordad que /TODO EN GNU\/LINUX es un FICHERO/, así que si dominamos los ficheros
   podremos dominar los Sistemas Operativos.

   Una terminal en todo momento está tomando un Directorio como /Working Directory/, es decir
   como Directorio de Trabajo.

   Para saber cual és en todo momento, podemos ejecutar la orden ~pwd~ que nos mostrará 
   el directorio donde nos encontramos en ese momento. A partir de ahora tomaremos ese 
   /Directorio de Trabajo/ como el lugar básico desde el que ejecutaremos las órdenes 
   y cuando veamos que se nos indica "Ir a /home/" quiere decir que cambiemos nuestro
   /Directorio de Trabajo/ a ese, o más comúnmente: "Ir a ese directorio".

*** Comando cd   

    El comando ~cd~ se encarga de realizar esta tarea, cambia el directorio de trabajo activo 
    de la Shell al que se le indica como /argumento/.

    Ejemplo:

    #+BEGIN_SRC shell
    cd /tmp/
    #+END_SRC

    Cambiará nuestro directorio de trabajo a ~/tmp/~. Si ahora ejecutamos ~pwd~ veremos que 
    nos indica ese cambio de ruta.

    Algunos usos comunes de ~cd~

    #+BEGIN_SRC shell

    # Las lineas que comienzan por '#' se consideran 
    # en el mundo de los ShellScripts como "comentarios"
    # es decir, líneas que están escritas para los seres 
    # Humanos, no para la máquina.

    # Se utilizan muchísimo en el mundo informático.

    # Cambia el directorio a /var
    cd /var/   

    # Vuelve al directorio donde estaba (último conocido).
    cd -

    # Va al directorio "padre"
    cd ..

    # Va al directorio actual (no parece muy útil ^_^)
    cd .

    # Va al directorio personal del usuario
    cd ~

    # Va a una carpeta con ruta relativa al directorio actual
    cd Escritorio/ 

    #+END_SRC


*** Comando ls
    
    De la página de manual (~man ls~) obtenemos esta información:

    #+ATTR_LATEX: :width 13cm
    [[./imgs/man-ls.png]]
    
    Ya hemos visto que ~ls~ muestra información acerca del contenido del directorio
    que se le indica (en caso de que no se le pase ninguno directorio como argumento, 
    utilizará ~./~).
       
    Veamos las columnas que se muestran:
    
    #+ATTR_LATEX: :width 13cm
    [[./imgs/ls-ejemplo.png]]

**** Tarea 01

     Con lo explicado en clase (o buscando en internet describe qué nos indica cada columna).
     (omite la línea de /total 52/).

     
**** Tarea 02

     Indica para cada uno de los siguientes requisitos que argumentos deberíamos indicarle al 
     comando ~ls~.

     | Requisito                                                         | Comando + Argumentos |
     |-------------------------------------------------------------------+----------------------|
     | Lista el directorio ~/etc~                                        | ls /etc              |
     | Lista el directorio ~/var~ con las opciones vistas antes          |                      |
     | Lista el directorio ~/tmp~ sin información del grupo              |                      |
     | Lista los ficheros del directorio actual con la extensión ~.txt~  |                      |
     | Lista los ficheros del directorio actual con la extensión ~.pdf~  |                      |
     | Lista los ficheros del directorio /etc que comiencen por "a"      |                      |
     | Lista los ficheros del directorio /etc con la extensión ~.conf~   |                      |
     | Lista el directorio ~/var/~ por fecha en orden inverso            |                      |
     | Lista el directorio ~/etc/~ por tamaño en orden inverso           |                      |
     | Lista los ficheros del directorio ~/etc/~ que contengan una "u"   |                      |
     | Lista los ficheros del directorio ~/etc/~ que contengan una "n"   |                      |
     | Lista los ficheros del directorio ~/etc/~ que comiencen por vocal |                      |
    

*** Comando mkdir 

    Este comando crea directorios.

**** Tarea 03    

     Crea en tu carpeta personal la siguiente estructura de directorios.
    
     #+ATTR_LATEX: :width 8cm
     [[./imgs/mkdir-tarea.png]]
  
     Adjunta una captura de pantalla de la ejecución del comando ~ls -R ~/Tarea03/~, donde
     debería de mostrarse todas las carpetas creadas.

*** Comando      
    
  
